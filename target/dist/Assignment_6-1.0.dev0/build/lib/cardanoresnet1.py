# -*- coding: utf-8 -*-
"""CardanoResnet1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zmfKFPgag3L-6QSBp8TLMmqs-5Ot11e3
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import torch
import torchvision
import torch.nn as nn
import numpy as np
import torch.nn.functional as F
import torchvision.transforms as tt
import torchvision.models as models
from torchvision.transforms.transforms import Resize
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
from torchvision.datasets import ImageFolder
from torch.utils.data import DataLoader
import torchvision.transforms as tt
from torch.utils.data import random_split
from torchvision.utils import make_grid
from copy import copy
from zipfile import ZipFile
# %matplotlib inline

# from google.colab import drive
# drive.mount('/content/gdrive')

# !unzip gdrive/MyDrive/data/archive.zip

# opening the zip file in READ mode
# filename = '../DataSet/archive.zip'
# with ZipFile(filename, 'r') as zip:
#     # printing all the contents of the zip file
#     zip.printdir()
#
#     # extracting all the files
#     print('Extracting all the files now...')
#     zip.extractall()
#     print('Done!')




            
def show_device():
    return "cuda"

def show_DataLoader():
    return "g"






def training_step():
    #images, labels = batch 
    #out = self(images)                  # Generate predictions
    #loss = F.cross_entropy(out, labels) # Calculate loss
    return "e"

def validation_step():
    #images, labels = batch 
    #out = self(images)                    # Generate predictions
    #loss = F.cross_entropy(out, labels)   # Calculate loss
    #acc = accuracy(out, labels)           # Calculate accuracy
    return "b";
    
def validation_epoch_end():
    #batch_losses = [x['val_loss'] for x in outputs]
    #epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
    #batch_accs = [x['val_acc'] for x in outputs]
    #epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
    return "c"

def epoch_end():
    #print("Epoch [{}], val_loss: {:.4f}, val_acc: {:.4f}".format(epoch, result[i], result[i]))
    return "d"


